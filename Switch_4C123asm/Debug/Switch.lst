TI ARM Assembler PC v5.2.4 Mon Jun 29 08:44:34 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../Switch.asm                                                        PAGE    1

       1                    ; Switch.asm
       2                    ; Runs on LM4F120/TM4C123
       3                    ; Provide functions that initialize a GPIO as an input pin and
       4                    ; allow reading of a positive logic switch.
       5                    ; Use bit-banded I/O.
       6                    ; Daniel and Jonathan Valvano
       7                    ; September 12, 2013
       8                    
       9                    ; This example accompanies the book
      10                    ;  "Embedded Systems: Introduction to Arm Cortex M Microcontrollers"
      11                    ;  ISBN: 978-1469998749, Jonathan Valvano, copyright (c) 2015
      12                    ;  Section 4.2.2, Program 4.2, Figure 4.9
      13                    
      14                    ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.utexas.edu
      15                    ;   You may use, edit, run or distribute this file
      16                    ;   as long as the above copyright notice remains
      17                    ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
      18                    ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
      19                    ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
      20                    ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
      21                    ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
      22                    ;For more information about my classes, my research, and my books, see
      23                    ;http://users.ece.utexas.edu/~valvano/
      24                    
      25                    ; negative logic switches connected to PF0 and PF4 on the Launchpad
      26                    ; red LED connected to PF1 on the Launchpad
      27                    ; blue LED connected to PF2 on the Launchpad
      28                    ; green LED connected to PF3 on the Launchpad
      29                    ; NOTE: The NMI (non-maskable interrupt) is on PF0.  That means that
      30                    ; the Alternate Function Select, Pull-Up Resistor, Pull-Down Resistor,
      31                    ; and Digital Enable are all locked for PF0 until a value of 0x4C4F434B
      32                    ; is written to the Port F GPIO Lock Register.  After Port F is
      33                    ; unlocked, bit 0 of the Port F GPIO Commit Register must be set to
      34                    ; allow access to PF0's control registers.  On the LM4F120, the other
      35                    ; bits of the Port F GPIO Commit Register are hard-wired to 1, meaning
      36                    ; that the rest of Port F can always be freely re-configured at any
      37                    ; time.  Requiring this procedure makes it unlikely to accidentally
      38                    ; re-configure the JTAG and NMI pins as GPIO, which can lock the
      39                    ; debugger out of the processor and make it permanently unable to be
      40                    ; debugged or re-programmed.
      41 00000000                              .thumb
      42 00000000                              .text
      43                                       .align 2
      44 00000000 40004400  GPIO_PORTA_DIR_R   .field 0x40004400,32
      45 00000004 40004420  GPIO_PORTA_AFSEL_R .field 0x40004420,32
      46 00000008 40004510  GPIO_PORTA_PUR_R   .field 0x40004510,32
      47 0000000c 4000451C  GPIO_PORTA_DEN_R   .field 0x4000451C,32
      48 00000010 40004520  GPIO_PORTA_LOCK_R  .field 0x40004520,32
      49 00000014 40004524  GPIO_PORTA_CR_R    .field 0x40004524,32
      50 00000018 40004528  GPIO_PORTA_AMSEL_R .field 0x40004528,32
      51 0000001c 4000452C  GPIO_PORTA_PCTL_R  .field 0x4000452C,32
      52                    
      53 00000020 40025400  GPIO_PORTF_DIR_R   .field 0x40025400,32
      54 00000024 40025420  GPIO_PORTF_AFSEL_R .field 0x40025420,32
      55 00000028 40025510  GPIO_PORTF_PUR_R   .field 0x40025510,32
TI ARM Assembler PC v5.2.4 Mon Jun 29 08:44:34 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../Switch.asm                                                        PAGE    2

      56 0000002c 4002551C  GPIO_PORTF_DEN_R   .field 0x4002551C,32
      57 00000030 40025520  GPIO_PORTF_LOCK_R  .field 0x40025520,32
      58 00000034 40025524  GPIO_PORTF_CR_R    .field 0x40025524,32
      59 00000038 40025528  GPIO_PORTF_AMSEL_R .field 0x40025528,32
      60 0000003c 4002552C  GPIO_PORTF_PCTL_R  .field 0x4002552C,32
      61 00000040 4C4F434B  GPIO_LOCK_KEY      .field 0x4C4F434B,32  ; Unlocks the GPIO_CR register
      62 00000044 40025004  PF0                .field 0x40025004,32
      63 00000048 40025040  PF4                .field 0x40025040,32
      64 0000004c 40004080  PA5                .field 0x40004080,32
      65 00000050 40025044  SWITCHES           .field 0x40025044,32
      66 00000054 00027100  DELAY10MS   .field 160000,32    ; clock cycles in 10 ms (assumes 16 MHz clock)
      67 00000058 000000A0  DELAY10US   .field 160,32       ; clock cycles in 10 os (assumes 16 MHz clock)
      68 0000005c 000003E8  N1000       .field 1000,32
      69          00000010  SW1                .equ 0x10                 ; on the left side of the Launchpad board
      70          00000001  SW2                .equ 0x01                 ; on the right side of the Launchpad board
      71 00000060 400FE608  SYSCTL_RCGCGPIO_R  .field 0x400FE608,32
      72          00000020  SYSCTL_RCGC2_GPIOF .equ 0x00000020  ; port F Clock Gating Control
      73                    
      74                    
      75                            .global  Switch_Init
      76                            .global  Switch_Input
      77                            .global  Board_Init
      78                            .global  Board_Input
      79                            .global   SysTick_Init
      80                            .global   SysTick_Wait
      81                            .global   SysTick_Wait10ms
      82                    
      83                    ;------------Switch_Init------------
      84                    ; Initialize GPIO Port A bit 5 as input
      85                    ; Input: none
      86                    ; Output: none
      87                    ; Modifies: R0, R1
      88                    Switch_Init:  .asmfunc
      89 00000064 1008F85F      LDR R1, SYSCTL_RCGCGPIO_R         ; 1) activate clock for Port A ; [KEEP 32-BIT INS]
      90 00000068 6808          LDR R0, [R1] ; [ORIG 16-BIT INS]
      91 0000006a 0001F040      ORR R0, R0, #0x01               ; set bit 0 to turn on clock ; [KEEP 32-BIT INS]
      92 0000006e 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
      93 00000070 BF00          NOP ; [ORIG 16-BIT INS]
      94 00000072 BF00          NOP                             ; allow time for clock to finish ; [ORIG 16-BIT INS]
      95                                                        ; 2) no need to unlock Port A
      96 00000074 1060F85F      LDR R1, GPIO_PORTA_AMSEL_R     ; 3) disable analog functionality ; [KEEP 32-BIT INS]
      97 00000078 6808          LDR R0, [R1] ; [ORIG 16-BIT INS]
      98 0000007a 0020F020      BIC R0, #0x20                   ; 0 means analog is off ; [KEEP 32-BIT INS]
      99 0000007e 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     100 00000080 1068F85F      LDR R1, GPIO_PORTA_PCTL_R      ; 4) configure as GPIO ; [KEEP 32-BIT INS]
     101 00000084 6808          LDR R0, [R1] ; [ORIG 16-BIT INS]
     102 00000086 0070F420      BIC R0, #0x00F00000             ; 0 means configure PA5 as GPIO ; [KEEP 32-BIT INS]
     103 0000008a 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     104 0000008c 1090F85F      LDR R1, GPIO_PORTA_DIR_R       ; 5) set direction register ; [KEEP 32-BIT INS]
     105 00000090 6808          LDR R0, [R1] ; [ORIG 16-BIT INS]
     106 00000092 0020F020      BIC R0, #0x20                   ; PA5 input ; [KEEP 32-BIT INS]
     107 00000096 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     108 00000098 1098F85F      LDR R1, GPIO_PORTA_AFSEL_R     ; 6) regular port function ; [KEEP 32-BIT INS]
     109 0000009c 6808          LDR R0, [R1] ; [ORIG 16-BIT INS]
     110 0000009e 0020F020      BIC R0, #0x20                   ; 0 means disable alternate function ; [KEEP 32-BIT INS]
TI ARM Assembler PC v5.2.4 Mon Jun 29 08:44:34 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../Switch.asm                                                        PAGE    3

     111 000000a2 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     112 000000a4 109CF85F      LDR R1, GPIO_PORTA_DEN_R       ; 7) enable Port A digital port ; [KEEP 32-BIT INS]
     113 000000a8 6808          LDR R0, [R1] ; [ORIG 16-BIT INS]
     114 000000aa 0020F040      ORR R0, #0x20                   ; 1 means enable digital I/O ; [KEEP 32-BIT INS]
     115 000000ae 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     116 000000b0 4770          BX  LR ; [ORIG 16-BIT INS]
     117                        .endasmfunc
     118                    
     119                    ;------------Switch_Input------------
     120                    ; Read and return the status of PA5
     121                    ; Input: none
     122                    ; Output: R0  0x20 if PA5 high
     123                    ;         R0  0x00 if PA5 low
     124                    ; Modifies: R1
     125                    Switch_Input:  .asmfunc
     126 000000b2 1068F85F      LDR R1, PA5       ; pointer to PA5 ; [KEEP 32-BIT INS]
     127 000000b6 6808          LDR R0, [R1]      ; read just PA5 ; [ORIG 16-BIT INS]
     128 000000b8 4770          BX  LR            ; 0x20 or 0x00 ; [ORIG 16-BIT INS]
     129                        .endasmfunc
     130                    
     131                    ;------------Board_Init------------
     132                    ; Initialize GPIO Port F for negative logic switches on PF0 and
     133                    ; PF4 as the Launchpad is wired.  Weak internal pull-up
     134                    ; resistors are enabled, and the NMI functionality on PF0 is
     135                    ; disabled.
     136                    ; Input: none
     137                    ; Output: none
     138                    ; Modifies: R0, R1
     139                    Board_Init:  .asmfunc
     140                        ; activate clock for Port F
     141 000000ba 105CF85F      LDR R1, SYSCTL_RCGCGPIO_R       ; R1 = &SYSCTL_RCGCGPIO_R ; [KEEP 32-BIT INS]
     142 000000be 6808          LDR R0, [R1]                    ; R0 = [R1] ; [ORIG 16-BIT INS]
     143 000000c0 0020F040      ORR R0, R0, #SYSCTL_RCGC2_GPIOF ; R0 = R0|SYSCTL_RCGC2_GPIOF ; [KEEP 32-BIT INS]
     144 000000c4 6008          STR R0, [R1]                    ; [R1] = R0 ; [ORIG 16-BIT INS]
     145 000000c6 BF00          NOP ; [ORIG 16-BIT INS]
     146 000000c8 BF00          NOP                             ; allow time to finish activating ; [ORIG 16-BIT INS]
     147                        ; unlock the lock register
     148 000000ca 109CF85F      LDR R1, GPIO_PORTF_LOCK_R       ; R1 = &GPIO_PORTF_LOCK_R ; [KEEP 32-BIT INS]
     149 000000ce 0090F85F      LDR R0, GPIO_LOCK_KEY           ; R0 = GPIO_LOCK_KEY (unlock GPIO Port F Commit Register) ; [KEEP 
     150 000000d2 6008          STR R0, [R1]                    ; [R1] = R0 = 0x4C4F434B ; [ORIG 16-BIT INS]
     151                        ; set commit register
     152 000000d4 10A4F85F      LDR R1, GPIO_PORTF_CR_R         ; R1 = &GPIO_PORTF_CR_R ; [KEEP 32-BIT INS]
     153 000000d8 00FFF04F      MOV R0, #0xFF                   ; R0 = 0x01 (enable commit for PF0) ; [KEEP 32-BIT INS]
     154 000000dc 6008          STR R0, [R1]                    ; [R1] = R0 = 0x1 ; [ORIG 16-BIT INS]
     155                        ; set direction register
     156 000000de 10C0F85F      LDR R1, GPIO_PORTF_DIR_R        ; R1 = &GPIO_PORTF_DIR_R ; [KEEP 32-BIT INS]
     157 000000e2 6808          LDR R0, [R1]                    ; R0 = [R1] ; [ORIG 16-BIT INS]
     158 000000e4 0011F020      BIC R0, R0, #(SW1+SW2)          ; R0 = R0&~(SW1|SW2) (make PF0 and PF4 input; PF0 and PF4 built-in
     159 000000e8 6008          STR R0, [R1]                    ; [R1] = R0 ; [ORIG 16-BIT INS]
     160                        ; regular port function
     161 000000ea 10C8F85F      LDR R1, GPIO_PORTF_AFSEL_R      ; R1 = &GPIO_PORTF_AFSEL_R ; [KEEP 32-BIT INS]
     162 000000ee 6808          LDR R0, [R1]                    ; R0 = [R1] ; [ORIG 16-BIT INS]
     163 000000f0 0011F020      BIC R0, R0, #(SW1+SW2)          ; R0 = R0&~(SW1|SW2) (disable alt funct on PF0 and PF4) ; [KEEP 32
     164 000000f4 6008          STR R0, [R1]                    ; [R1] = R0 ; [ORIG 16-BIT INS]
     165                        ; put a delay here if you are seeing erroneous NMI
TI ARM Assembler PC v5.2.4 Mon Jun 29 08:44:34 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../Switch.asm                                                        PAGE    4

     166                        ; enable pull-up resistors
     167 000000f6 10D0F85F      LDR R1, GPIO_PORTF_PUR_R        ; R1 = &GPIO_PORTF_PUR_R ; [KEEP 32-BIT INS]
     168 000000fa 6808          LDR R0, [R1]                    ; R0 = [R1] ; [ORIG 16-BIT INS]
     169 000000fc 0011F040      ORR R0, R0, #(SW1+SW2)          ; R0 = R0|(SW1|SW2) (enable weak pull-up on PF0 and PF4) ; [KEEP 3
     170 00000100 6008          STR R0, [R1]                    ; [R1] = R0 ; [ORIG 16-BIT INS]
     171                        ; enable digital port
     172 00000102 10D8F85F      LDR R1, GPIO_PORTF_DEN_R        ; R1 = &GPIO_PORTF_DEN_R ; [KEEP 32-BIT INS]
     173 00000106 6808          LDR R0, [R1]                    ; R0 = [R1] ; [ORIG 16-BIT INS]
     174 00000108 0011F040      ORR R0, R0, #(SW1+SW2)          ; R0 = R0|(SW1|SW2) (enable digital I/O on PF0 and PF4) ; [KEEP 32
     175 0000010c 6008          STR R0, [R1]                    ; [R1] = R0 ; [ORIG 16-BIT INS]
     176                        ; configure as GPIO
     177 0000010e 10D4F85F      LDR R1, GPIO_PORTF_PCTL_R       ; R1 = &GPIO_PORTF_PCTL_R ; [KEEP 32-BIT INS]
     178 00000112 6808          LDR R0, [R1]                    ; R0 = [R1] ; [ORIG 16-BIT INS]
     179 00000114 100FF020      BIC R0, R0, #0x000F000F         ; R0 = R0&~0x000F000F (clear port control field for PF0 and PF4) ;
     180 00000118 0000F100      ADD R0, R0, #0x00000000         ; R0 = R0+0x00000000 (configure PF0 and PF4 as GPIO) ; [KEEP 32-BI
     181 0000011c 6008          STR R0, [R1]                    ; [R1] = R0 ; [ORIG 16-BIT INS]
     182                        ; disable analog functionality
     183 0000011e 10E8F85F      LDR R1, GPIO_PORTF_AMSEL_R      ; R1 = &GPIO_PORTF_AMSEL_R ; [KEEP 32-BIT INS]
     184 00000122 0000F04F      MOV R0, #0                      ; R0 = 0 (disable analog functionality on PF) ; [KEEP 32-BIT INS]
     185 00000126 6008          STR R0, [R1]                    ; [R1] = R0 ; [ORIG 16-BIT INS]
     186 00000128 4770          BX  LR                          ; return ; [ORIG 16-BIT INS]
     187                        .endasmfunc
     188                    
     189                    ;------------Board_Input------------
     190                    ; Read and return the status of the switches.
     191                    ; Input: none
     192                    ; Output: R0  0x01 if only Switch 1 is pressed
     193                    ;         R0  0x10 if only Switch 2 is pressed
     194                    ;         R0  0x00 if both switches are pressed
     195                    ;         R0  0x11 if no switches are pressed
     196                    ; Modifies: R1
     197                    Board_Input:  .asmfunc
     198 0000012a 10DCF85F      LDR R1, SWITCHES                ; R1 = &SWITCHES (pointer to location of PF0 and PF4) ; [KEEP 32-B
     199 0000012e 6808          LDR R0, [R1]                    ; R0 = [R1] (read PF0 and PF4) ; [ORIG 16-BIT INS]
     200 00000130 4770          BX  LR                          ; return ; [ORIG 16-BIT INS]
     201                        .endasmfunc
     202                    
     203                    
     204                    ;------------Switch_Debounce------------
     205                    ; Read and return the status of PA5
     206                    ; Input: none
     207                    ; Output: R0  0x20 if PA5 high
     208                    ;         R0  0x00 if PA5 low
     209                    ; Modifies: R1
     210                    ; returns a stable value
     211                    Switch_Debounce:  .asmfunc
     212 00000132 B570          PUSH {R4,R5,R6,LR} ; [ORIG 16-BIT INS]
     213 00000134 FFBDF7FF      BL   Switch_Input ; Prog 4.2 ; [KEEP 32-BIT INS]
     214 00000138 4605          MOV  R5,R0        ; switch value ; [ORIG 16-BIT INS]
     215 0000013a           loop1
     216 0000013a 40E0F85F      LDR  R4, N1000  ; 10ms = 1000*10us ; [KEEP 32-BIT INS]
     217 0000013e           loop2
     218 0000013e 00E8F85F      LDR  R0, DELAY10US   ;assume 16 MHz ; [KEEP 32-BIT INS]
     219 00000142 FFFEF7FF!     BL   SysTick_Wait ; wait 10us ; [KEEP 32-BIT INS]
     220 00000146 FFB4F7FF      BL   Switch_Input ; Prog 4.2 ; [KEEP 32-BIT INS]
TI ARM Assembler PC v5.2.4 Mon Jun 29 08:44:34 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../Switch.asm                                                        PAGE    5

     221 0000014a 42A8          CMP  R0,R5 ; [ORIG 16-BIT INS]
     222 0000014c D1F5          BNE  loop1 ; start over if different ; [ORIG 16-BIT INS]
     223 0000014e 1E64          SUBS R4,#1 ; same for 10ms? ; [ORIG 16-BIT INS]
     224 00000150 D1F5          BNE  loop2 ; [ORIG 16-BIT INS]
     225 00000152 BD70          POP  {R4,R5,R6,PC} ; [ORIG 16-BIT INS]
     226                        .endasmfunc
     227                    
     228                    ;------------Switch_Debounce------------
     229                    ; wait for the switch to be touched
     230                    ; Input: none
     231                    ; Output: none
     232                    ; Modifies: R1
     233                    Switch_WaitForTouch:  .asmfunc
     234 00000154 B510          PUSH {R4,LR} ; [ORIG 16-BIT INS]
     235 00000156           wait4Release
     236 00000156 FFACF7FF      BL   Switch_Input ; Prog 4.2 ; [KEEP 32-BIT INS]
     237 0000015a 2800          CMP  R0,#0 ; [ORIG 16-BIT INS]
     238 0000015c D1FB          BNE  wait4Release ;already touched ; [ORIG 16-BIT INS]
     239 0000015e 010CF85F      LDR  R0,DELAY10MS   ;assume 16 MHz ; [KEEP 32-BIT INS]
     240 00000162 FFFEF7FF!     BL   SysTick_Wait ; wait 10ms ; [KEEP 32-BIT INS]
     241 00000166           wait4Touch
     242 00000166 FFA4F7FF      BL   Switch_Input ; Prog 4.2 ; [KEEP 32-BIT INS]
     243 0000016a 2800          CMP  R0,#0 ; [ORIG 16-BIT INS]
     244 0000016c D0FB          BEQ  wait4Touch   ;wait for touch ; [ORIG 16-BIT INS]
     245 0000016e 011CF85F      LDR  R0,DELAY10MS   ; 10ms ; [KEEP 32-BIT INS]
     246 00000172 FFFEF7FF!     BL   SysTick_Wait ; wait 10ms ; [KEEP 32-BIT INS]
     247 00000176 BD10          POP  {R4,PC} ; [ORIG 16-BIT INS]
     248                        .endasmfunc
     249                    
     250                         .end                             ; end of file

--------------------------
Thumb2 Statistics
--------------------------
Number of Thumb2 ins converted to Thumb = 0 (0%)
Number of Thumb ins in input = 50 (53%)
Number of Thumb2 ins encoded as Thumb2 = 44 (100%)
Number of Thumb2 ins converted to 2 OPND Thumb = 0


No Assembly Errors, No Assembly Warnings
