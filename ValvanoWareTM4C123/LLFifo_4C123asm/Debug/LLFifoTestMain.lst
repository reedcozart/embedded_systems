TI ARM Assembler PC v5.2.4 Sat Jun 20 18:50:22 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../LLFifoTestMain.asm                                                PAGE    1

       1                    ; LLFifoTestMain.asm
       2                    ; Runs on any computer
       3                    ; Test linked list FIFO
       4                    ; Jonathan Valvano
       5                    ; April 23, 2013
       6                    
       7                    ;  This example accompanies the book
       8                    ;  "Embedded Systems: Introduction to Arm Cortex M Microcontrollers",
       9                    ;  ISBN: 978-1469998749, Jonathan Valvano, copyright (c) 2015
      10                    ;  Section 6.6.1 Programs 6.10, 6.11, 6.12, 6.13
      11                    ;  Section 6.6.2 Programs 6.14, 6.15, 6.16, 6.17
      12                    ;
      13                    ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.utexas.edu
      14                    ;   You may use, edit, run or distribute this file
      15                    ;   as long as the above copyright notice remains
      16                    ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
      17                    ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
      18                    ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
      19                    ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
      20                    ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
      21                    ;For more information about my classes, my research, and my books, see
      22                    ;http://users.ece.utexas.edu/~valvano/
      23 00000000                  .thumb
      24 00000000                  .data
      25                           .align  2
      26                    
      27 00000000           num1   .space 4
      28 00000004           num2   .space 4
      29 00000008           num3   .space 4
      30 0000000c           num4   .space 4
      31 00000010           num5   .space 4
      32                    ;export for use with debugger
      33                    
      34 00000000                  .text
      35                           .align 2
      36                           .global  Fifo_Init
      37                           .global  Fifo_Put
      38                           .global  Fifo_Get
      39                           .global  main
      40                    
      41                    ; subroutine called when an error is encountered
      42                    ; Input: none
      43                    ; Output: none
      44                    ; Modifies: R4, R5
      45                    crash:   .asmfunc
      46 00000000 4674          MOV R4, R14                     ; R4 = R14(LR) ; [ORIG 16-BIT INS]
      47 00000002 0401F1A4      SUB R4, R4, #1                  ; R4 = R4 - 1 (R4 is memory location of the instruction following 
      48 00000006 0501F105      ADD R5, R5, #1                  ; R5 = R5 + 1 (R5 is number of crashes so far in this pass through
      49 0000000a 4770          BX  LR                          ; return ; [ORIG 16-BIT INS]
      50                        .endasmfunc
      51                    main:   .asmfunc
      52 0000000c FFFEF7FF!     BL  Fifo_Init                   ; initialize linked list FIFO ; [KEEP 32-BIT INS]
      53 00000010           loop
      54 00000010 0400F04F      MOV R4, #0                      ; R4 = 0 (R4 is memory location of most recent crash) ; [KEEP 32-B
      55 00000014 0500F04F      MOV R5, #0                      ; R5 = 0 (R5 is number of crashes so far in this pass through loop
TI ARM Assembler PC v5.2.4 Sat Jun 20 18:50:22 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../LLFifoTestMain.asm                                                PAGE    2

      56                    ;*************** first tests ***************
      57 00000018 0001F04F      MOV R0, #1                      ; R0 = 1 ; [KEEP 32-BIT INS]
      58                                                        ;        First          Last  Description
      59 0000001c FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [1] [ ] [ ] [ ] [ ]  1 added to FIFO ; [KEEP 32-BIT INS]
      60 00000020 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
      61 00000022 D101          BNE skip1                       ; if not, skip to 'skip1' ; [ORIG 16-BIT INS]
      62 00000024 FFECF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
      63 00000028           skip1
      64 00000028 0002F04F      MOV R0, #2                      ; R0 = 2 ; [KEEP 32-BIT INS]
      65 0000002c FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [1] [2] [ ] [ ] [ ]  2 added to FIFO ; [KEEP 32-BIT INS]
      66 00000030 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
      67 00000032 D101          BNE skip2                       ; if not, skip to 'skip2' ; [ORIG 16-BIT INS]
      68 00000034 FFE4F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
      69 00000038           skip2
      70 00000038 4869          LDR R0, num1Addr                ; R0 = &num1 (pointer) ; [ORIG 16-BIT INS]
      71 0000003a FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [2] [ ] [ ] [ ] [ ]  1 removed from FIFO ; [KEEP 32-BIT I
      72 0000003e 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
      73 00000040 D101          BNE skip3                       ; if not, skip to 'skip3' ; [ORIG 16-BIT INS]
      74 00000042 FFDDF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
      75 00000046           skip3
      76 00000046 4866          LDR R0, num1Addr               ; R0 = &num1 (pointer) ; [ORIG 16-BIT INS]
      77 00000048 6800          LDR R0, [R0]                    ; R0 = [R0] = num1 (value) ; [ORIG 16-BIT INS]
      78 0000004a 2801          CMP R0, #1                      ; is R0 (num1) == 1? (was 1 correctly removed from the FIFO?) ; [O
      79 0000004c D001          BEQ skip4                       ; if so, skip to 'skip4' ; [ORIG 16-BIT INS]
      80 0000004e FFD7F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
      81 00000052           skip4
      82 00000052 0003F04F      MOV R0, #3                      ; R0 = 3 ; [KEEP 32-BIT INS]
      83 00000056 FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [2] [3] [ ] [ ] [ ]  3 added to FIFO ; [KEEP 32-BIT INS]
      84 0000005a 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
      85 0000005c D101          BNE skip5                       ; if not, skip to 'skip5' ; [ORIG 16-BIT INS]
      86 0000005e FFCFF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
      87 00000062           skip5
      88 00000062 4860          LDR R0, num2Addr                ; R0 = &num2 (pointer) ; [ORIG 16-BIT INS]
      89 00000064 FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [3] [ ] [ ] [ ] [ ]  2 removed from FIFO ; [KEEP 32-BIT I
      90 00000068 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
      91 0000006a D101          BNE skip6                       ; if not, skip to 'skip6' ; [ORIG 16-BIT INS]
      92 0000006c FFC8F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
      93 00000070           skip6
      94 00000070 485C          LDR R0, num2Addr                 ; R0 = &num2 (pointer) ; [ORIG 16-BIT INS]
      95 00000072 6800          LDR R0, [R0]                    ; R0 = [R0] = num2 (value) ; [ORIG 16-BIT INS]
      96 00000074 2802          CMP R0, #2                      ; is R0 (num2) == 2? (was 2 correctly removed from the FIFO?) ; [O
      97 00000076 D001          BEQ skip7                       ; if so, skip to 'skip7' ; [ORIG 16-BIT INS]
      98 00000078 FFC2F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
      99 0000007c           skip7
     100 0000007c 0004F04F      MOV R0, #4                      ; R0 = 4 ; [KEEP 32-BIT INS]
     101 00000080 FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [3] [4] [ ] [ ] [ ]  4 added to FIFO ; [KEEP 32-BIT INS]
     102 00000084 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     103 00000086 D101          BNE skip8                       ; if not, skip to 'skip8' ; [ORIG 16-BIT INS]
     104 00000088 FFBAF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     105 0000008c           skip8
     106 0000008c 4856          LDR R0, num3Addr                ; R0 = &num3 (pointer) ; [ORIG 16-BIT INS]
     107 0000008e FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [4] [ ] [ ] [ ] [ ]  3 removed from FIFO ; [KEEP 32-BIT I
     108 00000092 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     109 00000094 D101          BNE skip9                       ; if not, skip to 'skip9' ; [ORIG 16-BIT INS]
     110 00000096 FFB3F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
TI ARM Assembler PC v5.2.4 Sat Jun 20 18:50:22 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../LLFifoTestMain.asm                                                PAGE    3

     111 0000009a           skip9
     112 0000009a 4853          LDR R0, num3Addr                ; R0 = &num3 (pointer) ; [ORIG 16-BIT INS]
     113 0000009c 6800          LDR R0, [R0]                    ; R0 = [R0] = num3 (value) ; [ORIG 16-BIT INS]
     114 0000009e 2803          CMP R0, #3                      ; is R0 (num3) == 3? (was 3 correctly removed from the FIFO?) ; [O
     115 000000a0 D001          BEQ skip10                      ; if so, skip to 'skip10' ; [ORIG 16-BIT INS]
     116 000000a2 FFADF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     117 000000a6           skip10
     118 000000a6 4851          LDR R0, num4Addr                ; R0 = &num4 (pointer) ; [ORIG 16-BIT INS]
     119 000000a8 FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [ ] [ ] [ ] [ ] [ ]  4 removed from FIFO ; [KEEP 32-BIT I
     120 000000ac 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     121 000000ae D101          BNE skip11                      ; if not, skip to 'skip11' ; [ORIG 16-BIT INS]
     122 000000b0 FFA6F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     123 000000b4           skip11
     124 000000b4 484D          LDR R0, num4Addr                ; R0 = &num4 (pointer) ; [ORIG 16-BIT INS]
     125 000000b6 6800          LDR R0, [R0]                    ; R0 = [R0] = num4 (value) ; [ORIG 16-BIT INS]
     126 000000b8 2804          CMP R0, #4                      ; is R0 (num4) == 4? (was 4 correctly removed from the FIFO?) ; [O
     127 000000ba D001          BEQ skip12                      ; if so, skip to 'skip12' ; [ORIG 16-BIT INS]
     128 000000bc FFA0F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     129 000000c0           skip12
     130 000000c0 0005F04F      MOV R0, #5                      ; R0 = 5 ; [KEEP 32-BIT INS]
     131 000000c4 FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [5] [ ] [ ] [ ] [ ]  5 added to FIFO ; [KEEP 32-BIT INS]
     132 000000c8 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     133 000000ca D101          BNE skip13                      ; if not, skip to 'skip13' ; [ORIG 16-BIT INS]
     134 000000cc FF98F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     135 000000d0           skip13
     136 000000d0 4847          LDR R0, num5Addr                ; R0 = &num5 (pointer) ; [ORIG 16-BIT INS]
     137 000000d2 FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [ ] [ ] [ ] [ ] [ ]  5 removed from FIFO ; [KEEP 32-BIT I
     138 000000d6 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     139 000000d8 D101          BNE skip14                      ; if not, skip to 'skip14' ; [ORIG 16-BIT INS]
     140 000000da FF91F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     141 000000de           skip14
     142 000000de 4844          LDR R0, num5Addr                ; R0 = &num5 (pointer) ; [ORIG 16-BIT INS]
     143 000000e0 6800          LDR R0, [R0]                    ; R0 = [R0] = num5 (value) ; [ORIG 16-BIT INS]
     144 000000e2 2805          CMP R0, #5                      ; is R0 (num5) == 5? (was 5 correctly removed from the FIFO?) ; [O
     145 000000e4 D001          BEQ skip15                      ; if so, skip to 'skip15' ; [ORIG 16-BIT INS]
     146 000000e6 FF8BF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     147 000000ea           skip15
     148                    ;*************** second tests ***************
     149 000000ea 0001F04F      MOV R0, #1                      ; R0 = 1 ; [KEEP 32-BIT INS]
     150 000000ee FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [1] [ ] [ ] [ ] [ ]  1 added to FIFO ; [KEEP 32-BIT INS]
     151 000000f2 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     152 000000f4 D101          BNE skip16                      ; if not, skip to 'skip16' ; [ORIG 16-BIT INS]
     153 000000f6 FF83F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     154 000000fa           skip16
     155 000000fa 0002F04F      MOV R0, #2                      ; R0 = 2 ; [KEEP 32-BIT INS]
     156 000000fe FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [1] [2] [ ] [ ] [ ]  2 added to FIFO ; [KEEP 32-BIT INS]
     157 00000102 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     158 00000104 D101          BNE skip17                      ; if not, skip to 'skip17' ; [ORIG 16-BIT INS]
     159 00000106 FF7BF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     160 0000010a           skip17
     161 0000010a 0003F04F      MOV R0, #3                      ; R0 = 3 ; [KEEP 32-BIT INS]
     162 0000010e FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [1] [2] [3] [ ] [ ]  3 added to FIFO ; [KEEP 32-BIT INS]
     163 00000112 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     164 00000114 D101          BNE skip18                      ; if not, skip to 'skip18' ; [ORIG 16-BIT INS]
     165 00000116 FF73F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
TI ARM Assembler PC v5.2.4 Sat Jun 20 18:50:22 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../LLFifoTestMain.asm                                                PAGE    4

     166 0000011a           skip18
     167 0000011a 0004F04F      MOV R0, #4                      ; R0 = 4 ; [KEEP 32-BIT INS]
     168 0000011e FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [1] [2] [3] [4] [ ]  4 added to FIFO ; [KEEP 32-BIT INS]
     169 00000122 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     170 00000124 D101          BNE skip19                      ; if not, skip to 'skip19' ; [ORIG 16-BIT INS]
     171 00000126 FF6BF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     172 0000012a           skip19
     173 0000012a 0005F04F      MOV R0, #5                      ; R0 = 5 ; [KEEP 32-BIT INS]
     174 0000012e FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [1] [2] [3] [4] [5]  5 added to FIFO ; [KEEP 32-BIT INS]
     175 00000132 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     176 00000134 D101          BNE skip20                      ; if not, skip to 'skip20' ; [ORIG 16-BIT INS]
     177 00000136 FF63F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     178 0000013a           skip20
     179 0000013a 0006F04F      MOV R0, #6                      ; R0 = 6 ; [KEEP 32-BIT INS]
     180 0000013e FFFEF7FF!     BL  Fifo_Put                    ; FIFO:  [1] [2] [3] [4] [5]  expect error; FIFO full ; [KEEP 32-B
     181 00000142 2801          CMP R0, #1                      ; is R0 == 1? (did the operation succeed?) ; [ORIG 16-BIT INS]
     182 00000144 D101          BNE skip21                      ; if not, skip to 'skip21' ; [ORIG 16-BIT INS]
     183 00000146 FF5BF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     184 0000014a           skip21
     185 0000014a 4825          LDR R0, num1Addr                ; R0 = &num1 (pointer) ; [ORIG 16-BIT INS]
     186 0000014c FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [2] [3] [4] [5] [ ]  1 removed from FIFO ; [KEEP 32-BIT I
     187 00000150 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     188 00000152 D101          BNE skip22                      ; if not, skip to 'skip22' ; [ORIG 16-BIT INS]
     189 00000154 FF54F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     190 00000158           skip22
     191 00000158 4821          LDR R0, num1Addr                ; R0 = &num1 (pointer) ; [ORIG 16-BIT INS]
     192 0000015a 6800          LDR R0, [R0]                    ; R0 = [R0] = num1 (value) ; [ORIG 16-BIT INS]
     193 0000015c 2801          CMP R0, #1                      ; is R0 (num1) == 1? (was 1 correctly removed from the FIFO?) ; [O
     194 0000015e D001          BEQ skip23                      ; if so, skip to 'skip23' ; [ORIG 16-BIT INS]
     195 00000160 FF4EF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     196 00000164           skip23
     197 00000164 481F          LDR R0, num2Addr                ; R0 = &num2 (pointer) ; [ORIG 16-BIT INS]
     198 00000166 FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [3] [4] [5] [ ] [ ]  2 removed from FIFO ; [KEEP 32-BIT I
     199 0000016a 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     200 0000016c D101          BNE skip24                      ; if not, skip to 'skip24' ; [ORIG 16-BIT INS]
     201 0000016e FF47F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     202 00000172           skip24
     203 00000172 481C          LDR R0, num2Addr                   ; R0 = &num2 (pointer) ; [ORIG 16-BIT INS]
     204 00000174 6800          LDR R0, [R0]                    ; R0 = [R0] = num2 (value) ; [ORIG 16-BIT INS]
     205 00000176 2802          CMP R0, #2                      ; is R0 (num2) == 2? (was 2 correctly removed from the FIFO?) ; [O
     206 00000178 D001          BEQ skip25                      ; if so, skip to 'skip25' ; [ORIG 16-BIT INS]
     207 0000017a FF41F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     208 0000017e           skip25
     209 0000017e 481A          LDR R0, num3Addr                ; R0 = &num3 (pointer) ; [ORIG 16-BIT INS]
     210 00000180 FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [4] [5] [ ] [ ] [ ]  3 removed from FIFO ; [KEEP 32-BIT I
     211 00000184 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     212 00000186 D101          BNE skip26                      ; if not, skip to 'skip26' ; [ORIG 16-BIT INS]
     213 00000188 FF3AF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     214 0000018c           skip26
     215 0000018c 4816          LDR R0, num3Addr                ; R0 = &num3 (pointer) ; [ORIG 16-BIT INS]
     216 0000018e 6800          LDR R0, [R0]                    ; R0 = [R0] = num3 (value) ; [ORIG 16-BIT INS]
     217 00000190 2803          CMP R0, #3                      ; is R0 (num3) == 3? (was 3 correctly removed from the FIFO?) ; [O
     218 00000192 D001          BEQ skip27                      ; if so, skip to 'skip27' ; [ORIG 16-BIT INS]
     219 00000194 FF34F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     220 00000198           skip27
TI ARM Assembler PC v5.2.4 Sat Jun 20 18:50:22 2015

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../LLFifoTestMain.asm                                                PAGE    5

     221 00000198 4814          LDR R0, num4Addr                ; R0 = &num4 (pointer) ; [ORIG 16-BIT INS]
     222 0000019a FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [5] [ ] [ ] [ ] [ ]  4 removed from FIFO ; [KEEP 32-BIT I
     223 0000019e 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     224 000001a0 D101          BNE skip28                      ; if not, skip to 'skip28' ; [ORIG 16-BIT INS]
     225 000001a2 FF2DF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     226 000001a6           skip28
     227 000001a6 4811          LDR R0, num4Addr                ; R0 = &num4 (pointer) ; [ORIG 16-BIT INS]
     228 000001a8 6800          LDR R0, [R0]                    ; R0 = [R0] = num4 (value) ; [ORIG 16-BIT INS]
     229 000001aa 2804          CMP R0, #4                      ; is R0 (num4) == 4? (was 4 correctly removed from the FIFO?) ; [O
     230 000001ac D001          BEQ skip29                      ; if so, skip to 'skip29' ; [ORIG 16-BIT INS]
     231 000001ae FF27F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     232 000001b2           skip29
     233 000001b2 480F          LDR R0, num5Addr                ; R0 = &num5 (pointer) ; [ORIG 16-BIT INS]
     234 000001b4 FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [ ] [ ] [ ] [ ] [ ]  5 removed from FIFO ; [KEEP 32-BIT I
     235 000001b8 2800          CMP R0, #0                      ; is R0 == 0? (did the operation fail?) ; [ORIG 16-BIT INS]
     236 000001ba D101          BNE skip30                      ; if not, skip to 'skip30' ; [ORIG 16-BIT INS]
     237 000001bc FF20F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     238 000001c0           skip30
     239 000001c0 480B          LDR R0, num5Addr                ; R0 = &num5 (pointer) ; [ORIG 16-BIT INS]
     240 000001c2 6800          LDR R0, [R0]                    ; R0 = [R0] = num5 (value) ; [ORIG 16-BIT INS]
     241 000001c4 2805          CMP R0, #5                      ; is R0 (num5) == 5? (was 5 correctly removed from the FIFO?) ; [O
     242 000001c6 D001          BEQ skip31                      ; if so, skip to 'skip31' ; [ORIG 16-BIT INS]
     243 000001c8 FF1AF7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     244 000001cc           skip31
     245 000001cc 4804          LDR R0, num1Addr                ; R0 = &num1 (pointer) ; [ORIG 16-BIT INS]
     246 000001ce FFFEF7FF!     BL  Fifo_Get                    ; FIFO:  [ ] [ ] [ ] [ ] [ ]  expect error; FIFO empty ; [KEEP 32-
     247 000001d2 2801          CMP R0, #1                      ; is R0 == 1? (did the operation succeed?) ; [ORIG 16-BIT INS]
     248 000001d4 AF1CF47F      BNE loop                        ; if not, skip to 'loop' ; [KEEP 32-BIT INS]
     249 000001d8 FF12F7FF      BL  crash                       ; otherwise, run 'crash' subroutine ; [KEEP 32-BIT INS]
     250 000001dc E718          B   loop                        ; unconditional branch to 'loop' ; [ORIG 16-BIT INS]
     251                        .endasmfunc
     252                        .align 4
     253                    
     254 000001de 000046C0! num1Addr   .field num1,32
         000001e2 00000000 
     255 000001e2 00000000! num2Addr   .field num2,32
         000001e6 00000000 
     256 000001e6 00000000! num3Addr   .field num3,32
         000001ea 00000000 
     257 000001ea 00000000! num4Addr   .field num4,32
         000001ee 00000000 
     258 000001ee 00000000! num5Addr   .field num5,32
         000001f2 00000000 
     259                        .end                             ; end of file

--------------------------
Thumb2 Statistics
--------------------------
Number of Thumb2 ins converted to Thumb = 0 (0%)
Number of Thumb ins in input = 97 (57%)
Number of Thumb2 ins encoded as Thumb2 = 71 (100%)
Number of Thumb2 ins converted to 2 OPND Thumb = 0


No Assembly Errors, No Assembly Warnings
